Exercise # 6

1) Write a procedure to fetch data from table SALES for a given parameter orderid and
display the data(use ROWTYPE to capture the data)

CREATE OR REPLACE PROCEDURE FETCH_SALES (S_ORDERID NUMBER)
IS
	s_rec sales%ROWTYPE ;

BEGIN
SELECT *
INTO s_rec 
FROM SALES
WHERE ORDER_ID = S_ORDERID;

 DBMS_OUTPUT.PUT_LINE (s_rec.DATE);
 DBMS_OUTPUT.PUT_LINE (s_rec.ORDERID);
 DBMS_OUTPUT.PUT_LINE (s_rec.PRODUCTID);
 DBMS_OUTPUT.PUT_LINE (s_rec.CUSTOMERID);
 DBMS_OUTPUT.PUT_LINE (s_rec.SALESPERSONID);
 DBMS_OUTPUT.PUT_LINE (s_rec.QUANTITY);
 DBMS_OUTPUT.PUT_LINE (s_rec.UNITPRICE);
 DBMS_OUTPUT.PUT_LINE (s_rec.SALESAMOUNT);
 DBMS_OUTPUT.PUT_LINE (s_rec.TAXAMOUNT);
 DBMS_OUTPUT.PUT_LINE (s_rec.TOTALAMOUNT);
EXCEPTION
 WHEN no_data_found THEN
 dbms_output.put_line('No such Order!');
 WHEN too_many_rows THEN
 dbms_output.put_line('You got more than 1 row!');
 WHEN others THEN
 dbms_output.put_line('Error!');
END;
EXEC FETCH_SALES (1269);


2) Modify the above procedure to return the row you have stored in the ROWTYPE
variable using an OUT parameter.






CREATE OR REPLACE PROCEDURE FETCH_SALES (S_ORDERID IN NUMBER,  S_REC OUT NUMBER)
AS
	SALE_REC SALES%ROWTYPE;
BEGIN
SELECT *
INTO S_REC
FROM SALES
WHERE ORDER_ID = S_ORDERID;

	S_REC := SALE_REC ;


SELECT COUNT(1) INTO  SALE_REC FROM SALES
WHERE SALES_DATE = S_REC.SALES_DATE ;

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('No such Order!');
 WHEN TOO_MANY_ROWS THEN
 DBMS_OUTPUT.PUT_LINE('You got more than 1 row!');
 WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('Error!');

END;

DECLARE
 TOTAL_ROWS NUMBER;
BEGIN
 FETCH_SALES (1269, TOTAL_ROWS);
 DBMS_OUTPUT.PUT_LINE ('Total Number of rows: ' || TOTAL_ROWS);
END;